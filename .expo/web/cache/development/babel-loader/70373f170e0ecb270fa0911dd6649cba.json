{"ast":null,"code":"import createPrefixer from 'inline-style-prefixer/lib/createPrefixer';\nimport staticData from \"./static\";\nvar prefixAll = createPrefixer(staticData);\nexport var prefixInlineStyles = function prefixInlineStyles(style) {\n  var prefixedStyles = prefixAll(style);\n  Object.keys(prefixedStyles).forEach(function (prop) {\n    var value = prefixedStyles[prop];\n\n    if (Array.isArray(value)) {\n      prefixedStyles[prop] = value[value.length - 1];\n    }\n  });\n  return prefixedStyles;\n};\nexport default prefixAll;","map":{"version":3,"sources":["C:/Users/Chris/Desktop/CupO'JavaScript/CupOJavaScript/node_modules/react-native-web/src/modules/prefixStyles/index.js"],"names":["createPrefixer","staticData","prefixAll","prefixInlineStyles","style","prefixedStyles","Object","keys","forEach","prop","value","Array","isArray","length"],"mappings":"AASA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAOC,UAAP;AAIA,IAAMC,SAAwB,GAAGF,cAAc,CAACC,UAAD,CAA/C;AAEA,OAAO,IAAME,kBAAiC,GAAG,SAApCA,kBAAoC,CAACC,KAAD,EAAW;AAC1D,MAAMC,cAAc,GAAGH,SAAS,CAACE,KAAD,CAAhC;AAIAE,EAAAA,MAAM,CAACC,IAAP,CAAYF,cAAZ,EAA4BG,OAA5B,CAAoC,UAACC,IAAD,EAAU;AAC5C,QAAMC,KAAK,GAAGL,cAAc,CAACI,IAAD,CAA5B;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBL,MAAAA,cAAc,CAACI,IAAD,CAAd,GAAuBC,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAA5B;AACD;AACF,GALD;AAOA,SAAOR,cAAP;AACD,CAbM;AAeP,eAAeH,SAAf","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport createPrefixer from 'inline-style-prefixer/lib/createPrefixer';\r\nimport staticData from './static';\r\n\r\ntype StyleModifier = (style: Object) => Object;\r\n\r\nconst prefixAll: StyleModifier = createPrefixer(staticData);\r\n\r\nexport const prefixInlineStyles: StyleModifier = (style) => {\r\n  const prefixedStyles = prefixAll(style);\r\n\r\n  // React@15 removed undocumented support for fallback values in\r\n  // inline-styles. Revert array values to the standard CSS value\r\n  Object.keys(prefixedStyles).forEach((prop) => {\r\n    const value = prefixedStyles[prop];\r\n    if (Array.isArray(value)) {\r\n      prefixedStyles[prop] = value[value.length - 1];\r\n    }\r\n  });\r\n\r\n  return prefixedStyles;\r\n};\r\n\r\nexport default prefixAll;\r\n"]},"metadata":{},"sourceType":"module"}